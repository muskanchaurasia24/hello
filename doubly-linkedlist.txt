#include<stdlib.h>
#include <stdio.h>
#include<conio.h>

void create();
void display();
void insert_begin();
void insert_end();
void insert_pos();
void delete_begin();
void delete_end();
void delete_pos();


struct node
{
	int data;
	struct node *next;
	struct node *prev;
};
struct node *head=NULL;
void main()
{
	int choice;
	clrscr();
	while(1){

		printf("MENU \n");
		printf("1.Create \n");
		printf("2.Display \n");
		printf("3.Insert at the beginning\n");
		printf("4.Insert at the end\n");
		printf("5.Insert at specified position\n");
		printf("6.Delete from beginning\n");
		printf("7.Delete from the end\n");
		printf("8.Delete from specified position\n");
		printf("9.Exit\n");
		printf("*--------------------------------------*\n");
		printf("Enter your choice:\n");
		scanf("%d",&choice);
		switch(choice)
		{
			case 1:
					create();
					break;
			case 2:
					display();
					break;
			case 3:
					insert_begin();
					break;
			case 4:
					insert_end();
					break;
			case 5:
					insert_pos();
					break;
			case 6:
					delete_begin();
					break;
			case 7:
					delete_end();
					break;
			case 8:
					delete_pos();
					break;

			case 9:
					exit(0);
					break;

			default:
					printf("n Wrong Choice:\n");
					break;
		}
	}

}
void create()
{
	struct node *temp,*ptr;
	temp=(struct node *)malloc(sizeof(struct node));
	if(temp==NULL)
	{
		printf("Out of Memory Space:\n");
		exit(0);
	}
	printf("Enter the data value for the node\n");
	scanf("%d",&temp->data);
	temp->next=NULL;
	temp->prev=NULL;
	if(head==NULL)
	{
		head=temp;
	}
	else
	{
		ptr=head;
		while(ptr->next!=NULL)
		{
			ptr=ptr->next;
		}
		ptr->next=temp;
		temp->prev=ptr;
	}
}
void display()
{
	struct node *ptr;
	if(head==NULL)
	{
		printf("List is empty\n");
		return;
	}
	else
	{
		ptr=head;
		printf("The List elements are\n");
		while(ptr!=NULL)
		{
			printf(" %d \n",ptr->data );
			ptr=ptr->next ;
		}
	}
}
void insert_begin()
{
	struct node *temp;
	temp=(struct node *)malloc(sizeof(struct node));
	if(temp==NULL)
	{
		printf("Out of Memory Space\n");
		return;
	}
	printf("Enter the data value for the node\n" );
	scanf("%d",&temp->data);
	temp->next =NULL;
	temp->prev=NULL;
	if(head==NULL)
	{
		head=temp;
	}
	else
	{
		temp->next=head;
		head->prev=temp;
		head=temp;
	}
}
void insert_end()
{
	struct node *temp,*ptr;
	temp=(struct node *)malloc(sizeof(struct node));
	if(temp==NULL)
	{
		printf("Out of Memory Space \n");
		return;
	}
	printf("Enter the data value for the node \n" );
	scanf("%d",&temp->data );
	temp->next =NULL;
	temp->prev=NULL;
	if(head==NULL)
	{
		head=temp;
	}
	else
	{
		ptr=head;
		while(ptr->next !=NULL)
		{
			ptr=ptr->next ;
		}
		ptr->next =temp;
		temp->prev=ptr;
	}
}
void insert_pos()
{
	struct node *ptr,*temp, *temp1;
	int i,pos;
	temp=(struct node *)malloc(sizeof(struct node));
	if(temp==NULL)
	{
		printf("Out of Memory Space\n");
		return;
	}
	printf("Enter the position for the new node to be inserted:\n");
	scanf("%d",&pos);
	printf("Enter the data value of the node:\n");
	scanf("%d",&temp->data) ;

	temp->next=NULL;
	temp->prev=NULL;
	if(pos==0)
	{
		temp->next=head;
		head->prev=temp;
		head=temp;
	}
	else
	{
		for(i=0,ptr=head; i<pos-1;i++)
		{
			ptr=ptr->next;
			if(ptr==NULL)
			{
				printf("Position not found:[Handle with care] \n");
				return;
			}
		}
		 temp1=ptr->next;
		ptr->next=temp;
		temp->prev =ptr ;
		temp->next=temp1;
		temp1->prev=temp;
	}
}
void delete_begin()
{
	struct node *ptr;
	if(ptr==NULL)
	{
		printf("List is Empty:\n");
		return;
	}
	else
	{
		ptr=head;
		head=head->next ;
		head->prev=NULL;
		printf("The deleted element is : %d",ptr->data);
		free(ptr);
	}
}
void delete_end()
{
struct node *temp,*ptr;
if(head==NULL)
	{
	printf("List is Empty:\n");
	exit(0);
	}
else if(head->next ==NULL)
	{
	ptr=head;
	head=NULL;
	printf("The deleted element is: %d",ptr->data);
	free(ptr);
	}
	else
	{
	ptr=head;
	while(ptr->next!=NULL)
		{
		temp=ptr;
		ptr=ptr->next;
		}
	temp->next=NULL;
printf("The deleted element is:%d",ptr->data);
free(ptr);
	}
}
void delete_pos()
{
int i,pos;
struct node *temp, *temp1, *ptr;
if(head==NULL)
	{
printf("The List is Empty \n");
exit(0);
	}
else
	{
printf("Enter the position of the node to be deleted:");
scanf("%d",&pos);
if(pos==0)
		{
ptr=head;
head=head->next ;
head->prev=NULL;
printf("The deleted element is:%d",ptr->data  );
free(ptr);
		}
else
		{
ptr=head;
for(i=0;i<pos;i++)
{ 	temp=ptr;
	ptr=ptr->next ;
if(ptr==NULL)
				{
printf("Position not Found \n");
return;
				}
			}

temp->next =ptr->next ;
temp1=ptr->next;
temp1->prev=temp;
printf("The deleted element is:%d",ptr->data );
free(ptr);
		}
	}
}
